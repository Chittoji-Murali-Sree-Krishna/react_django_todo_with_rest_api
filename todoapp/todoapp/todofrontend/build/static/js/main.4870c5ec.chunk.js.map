{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","todoList","activeItem","id","title","completed","editing","fetchTasks","bind","handleChange","handleSubmit","getCookie","startEdit","deleteItem","strikeUnstike","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","console","log","fetch","then","response","json","data","setState","e","target","value","preventDefault","csrftoken","url","method","headers","body","JSON","stringify","catch","error","task","tasks","self","className","onSubmit","style","flex","type","placeholder","onChange","map","index","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4870c5ec.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      todoList:[],\n      activeItem:{\n        id:null,\n        title:'',\n        completed:false,\n      }, \n      editing:false,\n    }\n    this.fetchTasks = this.fetchTasks.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getCookie =  this.getCookie.bind(this)\n    this.startEdit = this.startEdit.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n    this.strikeUnstike = this.strikeUnstike.bind(this)\n  };\n    getCookie(name){\n    var cookieValue = null;\n    if(document.cookie && document.cookie !== ''){\n      var cookies = document.cookie.split(';');\n      for(var i=0; i<cookies.length; i++){\n        var cookie = cookies[i].trim();\n        if (cookies.substring(0, name.length +1) === (name + '=')){\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        }\n      }\n    }\n    return cookieValue;\n  }\n  componentWillMount(){\n    this.fetchTasks()\n  }\n  fetchTasks(){\n    console.log('fetching.....')\n    fetch('http://127.0.0.1:8000/todo/task-list/')\n    .then(response => response.json())\n    .then(data => \n      this.setState({\n        todoList:data\n      })\n      )\n  }\n\n  handleChange(e){\n    var name = e.target.name\n    var value = e.target.value\n    console.log('Name:',name, 'Value:',value)\n\n    this.setState({\n      activeItem:{\n        ...this.state.activeItem,\n        title:value\n      }\n    })\n  }\n  handleSubmit(e){\n    e.preventDefault()\n    console.log('Item:', this.state.activeItem)\n    var csrftoken = this.getCookie('csrftoken')\n\n    var url = 'http://127.0.0.1:8000/todo/task-create/'\n    if(this.state.editing === true){\n      url = `http://127.0.0.1:8000/todo/task-update/${this.state.activeItem.id}/`\n      this.setState({\n        editing:false,\n      })\n    }\n\n\n\n    fetch(url, {\n      method:'POST',\n      headers:{\n        'Content-type' : 'application/json',\n        'x-CSRFToken':csrftoken,\n      },\n      body:JSON.stringify(this.state.activeItem)\n    }).then((response) => {\n      this.fetchTasks()\n      this.setState({\n        activeItem:{\n          id:null,\n          title:'',\n          completed:false,\n        }\n      })\n    }).catch(function(error){\n      console.log('E', error)\n    })\n  }\n  startEdit(task){\n     this.setState({\n       activeItem:task,\n       editing:true,\n     })\n  }\n  deleteItem(task){\n    var csrftoken = this.getCookie('csrftoken')\n    fetch(`http://127.0.0.1:8000/todo/task-delete/${task.id}`, {\n      method:'DELETE',\n      headers:{\n        'content-type':'application/json',\n        'x-CSRFToken':csrftoken,\n      }\n    }).then((response) => {\n      this.fetchTasks()\n    })\n  }\n  strikeUnstike(task){\n    task.completed = !task.completed\n    console.log('task:',task.completed)\n    var csrftoken = this.getCookie('csrftoken')\n    var url = `http://127.0.0.1:8000/todo/task-update/${task.id}/`\n\n    fetch(url, {\n      method:'POST',\n      headers:{\n        'content-type':'application/json',\n        'x-CSRFToken':csrftoken,\n      },\n      body:JSON.stringify({'completed':task.completed, 'title':task.title})\n    }).then(() => {\n      this.fetchTasks()\n    })\n\n  }\n\n  render(){\n    var tasks = this.state.todoList\n    var self = this\n    return(\n      <div className='container'>\n        <div id='task-container'>\n          <div id='form-wrapper'>\n            <form  id='form' onSubmit={this.handleSubmit}>\n              <div className='flex-wrapper'>\n              <div style={{flex: 6}}>\n                <input className='form-control' id='title' type='text' name='title' placeholder='enter your text' onChange={this.handleChange} value={this.state.activeItem.title}></input>\n              </div>\n              <div style={{flex:1}}>\n                <input id='submit' className='btn btn-warning' type='submit' name='add'></input>\n              </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div id='list-wrapper'>\n          {tasks.map(function(task, index){\n            return(\n              <div key={index} className='task-wrapper flex-wrapper'>\n                <div style={{flex:7}}>\n                  {task.completed === false? (\n                    <span>{task.title}</span>\n                  ) : (\n                    <strike>{task.title}</strike>\n                  )}\n                  <div style={{flex:0.3}}>\n                  <input type='checkbox' onClick={() => self.strikeUnstike(task)}></input>\n                </div>\n                </div>\n                <div style={{flex:1}}>\n                  <button onClick={() => self.startEdit(task)} className='btn btn-sm btn-outline-info'>Edit</button>\n                </div>\n                <div style={{flex:1}}>\n                <button onClick={() => self.deleteItem(task)} className='btn btn-sm btn-outline-dark'>Delete</button>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}